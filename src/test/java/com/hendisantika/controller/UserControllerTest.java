package com.hendisantika.controller;

import com.hendisantika.model.User;
import com.hendisantika.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.r2dbc.core.DatabaseClient;
import org.springframework.http.MediaType;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.reactive.server.WebTestClient;
import reactor.core.publisher.Flux;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * Created by IntelliJ IDEA.
 * Project : spring-boot-webflux-reactive-rest-api-example
 * User: hendisantika
 * Email: hendisantika@gmail.com
 * Telegram : @hendisantika34
 * Date: 12/10/21
 * Time: 19.32
 */
@ExtendWith(SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@DirtiesContext
@AutoConfigureWebTestClient
@ActiveProfiles("test")
@Slf4j
public class UserControllerTest {

    @Autowired
    private WebTestClient webTestClient;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private DatabaseClient databaseClient;

    private List<User> getData() {
        return Arrays.asList(new User(null, "Uzumaki Naruto", 30, 10000),
                new User(null, "Uchiha Sasuke", 35, 1000),
                new User(null, "Haruno Sakura", 30, 1000000));
    }

    @BeforeEach
    public void setup() {
        List<String> statements = Arrays.asList("DROP TABLE IF EXISTS users ;",
                "CREATE TABLE users ( id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name VARCHAR(100) NOT " +
                        "NULL, age integer,salary decimal);");

        statements.forEach(it -> databaseClient. (it)
                .fetch()
                .rowsUpdated()
                .block())

        userRepository.deleteAll()
                .thenMany(Flux.fromIterable(getData()))
                .flatMap(userRepository::save)
                .doOnNext(user -> {
                    System.out.println("User Inserted from UserControllerTest: " + user);
                })
                .blockLast();

    }

    @Test
    public void getAllUsersValidateCount() {
        webTestClient.get().uri("/users").exchange()
                .expectStatus().isOk()
                .expectHeader().contentType(MediaType.APPLICATION_JSON_VALUE)
                .expectBodyList(User.class)
                .hasSize(3)
                .consumeWith(user -> {
                    List<User> users = user.getResponseBody();
                    users.forEach(u -> {
                        assertTrue(u.getId() != null);
                    });
                });
    }
}
